Тестовое задание

PHP/PostgreSQL middle
Результат выполнения необходимо предоставить в виде ссылки на расшаренный документ (github repo/gist, gitlab repo/snippet, gogole doc/drive, yandex disk и т.п.).
Задачи теста необходимо рассматривать как реальные и выполнять как в рабочей обстановке: вникнуть в условия каждой задачи, очень внимательно разбораться в деталях и выяснить, что в итоге требуется сделать и как именно.
В задачах на PHP предполагается использование PHP версии 8.3

Задача 1
Написать SQL-запросы для PostgreSQL:

Выборки пользователей, у которых количество постов больше, чем у пользователя их пригласившего.
Выборки пользователей, имеющих максимальное количество постов в своей группе.
Выборки групп, количество пользователей в которых превышает 10000.
Выборки пользователей, у которых пригласивший их пользователь из другой группы.
Выборки групп с максимальным количеством постов у пользователей.


create table groups
(
    id   int         not null primary key,
    name varchar(50) not null
);



create table users
(
    id                      int         not null primary key,
    group_id                int         not null,
    invited_by_user_id      int         not null,
    name                    varchar(50) not null,
    posts_qty               int         not null,
    constraint  fk_users_group_id
        foreign key (group_id) references `groups` (id)
            on update cascade on delete cascade
);



insert into groups 
    (id, name)
values
    (1, 'Группа 1'),
    (2, 'Группа 2');



insert into users
    (id, group_id, invited_by_user_id, name, posts_qty)
values
    (1, 1, 0, 'Пользователь 1', 0),
    (2, 1, 1, 'Пользователь 2', 2),
    (3, 1, 2, 'Пользователь 3', 5),
    (4, 2, 3, 'Пользователь 4', 7),
    (5, 2, 4, 'Пользователь 5', 1);



Задача 2
Реализовать на PHP расчет количества вторников между двумя датами на PHP. Алгоритм должен быть наиболее оптимальный.

Задача 3
Написать PHP класс, который реализует структуру данных Дек, максимальный размер которого определяется заданным числом в момент создания экземпляра класса.
В классе должны быть реализованы методы:


pushBack(value) - добавить элемент в конец дека. Если в деке уже находится максимальное число элементов, вернуть false.

pushFront(value) - добавить элемент в начало дека. Если в деке уже находится максимальное число элементов, вернуть false.

popBack() - вывести первый элемент дека и удалить его. Если дек был пуст, вернуть false.

popFront() вывести последний элемент дека и удалить его. Если дек был пуст, вернуть false.

Внимание: все операции должны выполняться за O(1), при реализации используйте кольцевой буфер.

Задача 4
Дана матрица n x m. Нужно написать PHP функцию, которая на вхоод принимает координаты элемента (индекс строки, индекс столбца), а возвращает сумму всех его соседей. Соседним считается элемент, находящийся от текущего на одну ячейку влево, вправо, вверх или вниз. Диагональные элементы соседними не считаются.
Например, в матрице ниже соседними элементами для (0, 0) будут 71 и 13, а их сумма равна 84. Для элемента (3, 2) соседними элементами являются 11, 0, 1, 34, а их сумма равна 46.

[
    [ 51, 71, 1, 50 ],
    [ 13, 5, 19, 11 ],
    [ 60, 4, 11, 20 ],
    [ 13, 34, 17, 0 ],
    [ 16, 53, 1, 32 ]
]
